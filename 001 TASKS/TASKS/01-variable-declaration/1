const sum = (...args) => args.reduce((s, num) => s + num, 0);

const myArray = [1, 45, 33, 78, 100];
const myArray2 = [...myArray, 300, 400, 500];

console.log(sum(...myArray2));

/** ЗАДАЧА 51 - Операторы "rest" (остаток) и "spread" (распространение)
 *
 * 1. Создайте функцию "meanScore",
 * которая будет принимать любое количество аргументов,
 * объединять их в один массив и возвращать среднее значение всех аргументов,
 * округленное до 2 знаков после запятой.
 *
 * 2. Если хотя бы один элемент в этом массиве не является числом -
 * выводим в консоль следующую ошибку:
 * "Все аргументы в вызове функции должны быть числами!"
 *
 * ПОДСКАЗКА: В этом задании вы должны использовать как оператор "rest",
 * так и оператор "spread".
 */

const scores1 = [0, 1.5, 2.5, 3.7];
const scores2 = [1.7, 4.5, 0, 4.9, 5.0, 4.2];
const scores3 = [1.3, 2.5, 1.9];
const scores4 = ["abc", 1.3, true, 2.5, 1.9];

const meanScore = (...argArray) => {
  // let notInt = false
  // argArray.forEach((el) => (typeof el !== 'number') ? notInt = true : null)
  // if (notInt) {
  //     return 'Все аргументы в вызове функции должны быть числами!'
  //  }

  if (argArray.some((el) => typeof el !== "number")) {
    console.error("Все аргументы в вызове функции должны быть числами!");
    return;
  }

  let res = argArray.reduce((sum, el) => sum + el, 0);
  // console.log(res)
  // res = Math.round(100 * res / argArray.length) / 100
  return (res / argArray.length).toFixed(2);
};

console.log(meanScore(...scores1));
// 1.93

console.log(meanScore(...scores1, ...scores2));
//  // 2.8

console.log(meanScore(...scores1, ...scores2, ...scores3));
// 2.59

console.log(meanScore(...scores4));
//  // Все аргументы в вызове функции должны быть числами!

/** ЗАДАЧА 52 - Параметры функции по умолчанию
 *
 * 1. Создайте функцию "weatherForecast" с двумя параметрами "city" и "weather"
 *
 * 2. Если второй аргумент отсутствует,
 * параметр "weather" должен получить значение "Отличная погода!"
 *
 * ВАЖНО:
 *  - Сначала решите это БЕЗ параметра функции по умолчанию
 *  - Закомментируйте предыдущее решение
 * и решите ту же задачу с параметром функции по умолчанию
 *
 * ПРИМЕЧАНИЕ:
 * Внимательно сравните свои результаты с результатами тестовых вызовов
 */

const weatherForecast = (city, weather) => {
  return `Прогноз погоды для города ${city}: ${weather || "Отличная погода!"}`;
};

console.log(weatherForecast("Dubai", "Солнечно"));
// Прогноз погоды для города Dubai: Солнечно

console.log(weatherForecast("London", "Небольшой дождь"));
// Прогноз погоды для города London: Небольшой дождь

console.log(weatherForecast("Paris"));
// Прогноз погоды для города Paris: Отличная погода!

console.log(weatherForecast("Miami", ""));
// Прогноз погоды для города Miami:

console.log(weatherForecast("Las Vegas", undefined));
// Прогноз погоды для города Las Vegas: Отличная погода!

/** ЗАДАЧА 53 - Сокращенное написание свойств объектов
 *
 * 1. Исправьте все ошибки в коде.
 *
 * 2. Измените объект, возвращаемый функцией "photosGallery", используя:
 *  - Сокращенные имена свойств
 *  - Сокращенные имена методов
 *  - Также нужно изменить одно свойство объекта
 * и сделать его вычисляемым свойством
 *
 * 3. Сообщения в консоли должны быть точно такими же,
 * как и в конце этой задачи
 */

const photosGallery = (title, dimensions, date) => {
  return {
    title,
    info() {
      console.log(`Фото "${title}" имеет разрешение ${dimensions}`);
    },
    [dimensions]: true,
    publishInfo() {
      console.log(
        `Фото ${title} было опубликовано ${Math.floor(
          (new Date().getTime() - date.getTime()) / 1000
        )} секунды назад`
      );
    },
    date,
  };
};

const myDogPhoto = photosGallery("My dog", "1920x1080", new Date());

const testDimension1 = "1920x1080";
const testDimension2 = "1080x720";

myDogPhoto.info();
/* Фото "My dog" имеет разрешение 1920x1080 */

setTimeout(() => myDogPhoto.publishInfo(), 2000);
/* Фото "My dog" было опубликовано 2 секунды назад */

/* ВОПРОС: Почему метод "publishInfo" все еще имеет доступ 
  к параметрам функции "photosGallery" (например "date")? */

console.log(myDogPhoto);
console.log(myDogPhoto[testDimension1]); // true
console.log(myDogPhoto[testDimension2]); // undefined

/** ЗАДАЧА 54 - Деструктуризация массива
 *
 * Измените раздел параметров в функции "processQuantities" так,
 * чтобы совпали выводы в консоли
 *
 * Используйте деструктуризацию массива
 */

const processQuantities = ([minQty, maxQty, defaultQty = 0]) => {
  console.log(minQty); // 8
  console.log(maxQty); // 29
  console.log(defaultQty); // 10 в первом вызове, 0 во втором вызове
  return defaultQty + maxQty - minQty;
};

const inputQuantities1 = [8, 29, 10];
console.log(processQuantities(inputQuantities1)); // 31

const inputQuantities2 = [8, 29];
console.log(processQuantities(inputQuantities2)); // 21

/** ЗАДАЧА 55 - Деструктуризация результата функции
 *
 * 1. Создайте функцию "minMax", которая принимает любое количество аргументов
 *
 * 2. Эта функция должна возвращать массив из двух элементов:
 *  - Первый элемент массива - минимальное значение среди всех аргументов.
 *  - Второй элемент массива - это максимальное значение среди всех аргументов.
 */
const minMax = (...arr) => {
  return [Math.min(...arr), Math.max(...arr)];
};

let min, max;

/* Вызовите здесь функцию "minMax" с аргументами 24, 5, 34, 10 
и используя деструктуризацию массивов присвойте значения переменным "min" и "max" */
[min, max] = minMax(24, 5, 34, 10);
console.log(min, max); // 5, 34
/* Вызовите здесь функцию "minMax" еще раз с аргументами 18, 23, 103, 70, 80, 25 */
[min, max] = minMax(18, 23, 103, 70, 80, 25);
console.log(min, max); // 18, 103
